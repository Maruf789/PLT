import 'buckcal_lib.bc'

def double mat trans(double mat x) do
  double mat ret;
  int i; int j;
  ret : init_mat(cols(x), rows(x), 0.0);
  for i in range(1, rows(x)) do
    for j in range(1, cols(x)) do
      ret[j, i] : x[i, j];
    rof
  rof
  return ret;
fed

def int mat range_inv(int x, int y) do
	int mat v;
	int i : x;
  int j : 1;
	int mat tmp;
	for (i >= y) do
		tmp: {i};
		colname(tmp, {'c' + string_of_int(j)});
		v : colcat(v, tmp);
		i: i - 1;
    j: j + 1;
	rof
	return v;
fed


# return x%y
def int mod(int x, int y) do
	int c : x / y;
	return x - y*c;
fed

# Euclidean Greatest Common Divisor
def int gcd(int a, int b) do
   int c;
   # m: a; n: b;
   for (b!=0) do  #Remainder is not zero
   c: mod(a, b); a: b; b: c; #continue to divide until the remainder is 0
   rof
   return a;
fed


def double mat gauss_elim(double mat a, double mat b) do
    int i; int j; int k; int n;
    double c; double sum;
    double mat x;

    n: rows(a);
    x: range_col(1, n) * 1.2;
    # loop for the generation of upper triangular matrix
    for i in range(1, n-1) do
        for j in range(1, n) do
        	if j > i then
	            c : a[j, i] / a[i, i];
	            for k in range(i, n) do
	                a[j, k] : a[j, k] - c * a[i, k];
	            rof
	            b[j, 1] : b[j, 1] - c * b[i, 1];
	        fi
        rof
    rof

    # this loop is for backward substitution
    x[n, 1] : b[n, 1] / a[n, n];
    for i in range_inv(n-1, 1) do
        sum: b[i, 1];
        for j in range(i+1, n) do
            sum: sum - a[i, j]*x[j, 1];
        rof
        x[i, 1] : sum / a[i, i];
    rof
    return x;
fed