type token =
  | LPAREN
  | RPAREN
  | LSBRACK
  | RSBRACK
  | LBRACE
  | RBRACE
  | SEMI
  | COMMA
  | ASSIGN
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | IF
  | THEN
  | ELIF
  | ELSE
  | FI
  | FOR
  | IN
  | DO
  | ROF
  | RETURN
  | BREAK
  | CONTINUE
  | DEF
  | FED
  | DISP
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | NOT
  | AND
  | OR
  | INT
  | DOUBLE
  | STRING
  | BOOL
  | MAT of (int)
  | ID of (string)
  | BOOL_LITERAL of (bool)
  | INT_LITERAL of (int)
  | DOUBLE_LITERAL of (float)
  | STRING_LITERAL of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 56 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LSBRACK *);
  260 (* RSBRACK *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* SEMI *);
  264 (* COMMA *);
  265 (* ASSIGN *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* IF *);
  271 (* THEN *);
  272 (* ELIF *);
  273 (* ELSE *);
  274 (* FI *);
  275 (* FOR *);
  276 (* IN *);
  277 (* DO *);
  278 (* ROF *);
  279 (* RETURN *);
  280 (* BREAK *);
  281 (* CONTINUE *);
  282 (* DEF *);
  283 (* FED *);
  284 (* DISP *);
  285 (* EQ *);
  286 (* NEQ *);
  287 (* LT *);
  288 (* LEQ *);
  289 (* GT *);
  290 (* GEQ *);
  291 (* NOT *);
  292 (* AND *);
  293 (* OR *);
  294 (* INT *);
  295 (* DOUBLE *);
  296 (* STRING *);
  297 (* BOOL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  298 (* MAT *);
  299 (* ID *);
  300 (* BOOL_LITERAL *);
  301 (* INT_LITERAL *);
  302 (* DOUBLE_LITERAL *);
  303 (* STRING_LITERAL *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\003\000\003\000\005\000\
\005\000\006\000\006\000\006\000\006\000\007\000\007\000\008\000\
\008\000\010\000\010\000\011\000\011\000\012\000\012\000\013\000\
\013\000\014\000\014\000\015\000\015\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\016\000\016\000\
\009\000\009\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\001\000\001\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\001\000\003\000\005\000\000\000\
\002\000\002\000\001\000\004\000\003\000\000\000\001\000\010\000\
\009\000\001\000\002\000\000\000\005\000\000\000\002\000\002\000\
\003\000\001\000\003\000\001\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\006\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\003\000\004\000\003\000\001\000\003\000\
\000\000\002\000\001\000\002\000\003\000\007\000\007\000\005\000\
\003\000\002\000\002\000\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\070\000\000\000\018\000\000\000\001\000\
\002\000\003\000\004\000\005\000\000\000\000\000\000\000\009\000\
\000\000\000\000\019\000\000\000\000\000\000\000\000\000\000\000\
\059\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\030\000\031\000\032\000\033\000\000\000\034\000\
\058\000\000\000\000\000\015\000\000\000\000\000\006\000\000\000\
\000\000\024\000\000\000\000\000\000\000\051\000\000\000\000\000\
\000\000\000\000\067\000\066\000\000\000\000\000\000\000\000\000\
\000\000\060\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\
\000\000\000\000\000\000\054\000\025\000\000\000\000\000\057\000\
\000\000\057\000\061\000\065\000\052\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\000\040\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
\007\000\000\000\000\000\000\000\000\000\000\000\053\000\000\000\
\000\000\000\000\012\000\008\000\000\000\057\000\064\000\000\000\
\000\000\000\000\000\000\000\000\057\000\000\000\000\000\036\000\
\017\000\000\000\000\000\000\000\062\000\063\000\016\000\057\000\
\000\000"

let yydgoto = "\002\000\
\004\000\015\000\016\000\039\000\005\000\044\000\045\000\006\000\
\017\000\007\000\125\000\134\000\040\000\052\000\053\000\095\000\
\041\000"

let yysindex = "\023\000\
\006\255\000\000\054\255\000\000\048\255\000\000\006\255\000\000\
\000\000\000\000\000\000\000\000\046\255\030\255\063\255\000\000\
\189\000\048\255\000\000\048\255\113\255\062\255\106\255\196\000\
\000\000\106\255\106\255\210\255\106\255\133\255\140\255\106\255\
\106\255\002\255\000\000\000\000\000\000\000\000\253\254\000\000\
\000\000\189\000\077\255\000\000\012\255\048\255\000\000\106\255\
\149\001\000\000\206\002\036\255\152\255\000\000\108\002\035\255\
\136\002\032\002\000\000\000\000\060\002\069\255\214\000\106\255\
\106\255\000\000\106\255\106\255\106\255\106\255\106\255\106\255\
\106\255\106\255\106\255\106\255\106\255\106\255\000\000\127\255\
\048\255\017\255\069\002\000\000\000\000\106\255\106\255\000\000\
\106\255\000\000\000\000\000\000\000\000\206\002\033\255\099\002\
\206\002\119\255\119\255\000\000\000\000\163\255\163\255\132\255\
\132\255\132\255\132\255\069\255\165\002\000\000\128\255\143\255\
\000\000\152\255\206\002\189\000\150\002\111\255\000\000\106\255\
\106\255\048\255\000\000\000\000\034\255\000\000\000\000\206\002\
\023\002\158\255\048\255\106\255\000\000\166\255\205\255\000\000\
\000\000\095\000\178\002\189\000\000\000\000\000\000\000\000\000\
\189\000"

let yyrindex = "\000\000\
\001\000\000\000\000\000\000\000\048\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\170\000\048\000\000\000\037\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\190\000\038\255\000\000\000\000\037\255\000\000\000\000\
\000\000\000\000\121\255\000\000\117\255\000\000\000\000\192\002\
\000\000\000\000\000\000\000\000\000\000\248\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\255\000\000\000\000\
\192\255\040\001\076\001\000\000\000\000\096\001\116\001\169\001\
\189\001\209\001\229\001\249\001\011\002\000\000\075\255\000\000\
\000\000\131\255\160\255\162\255\000\000\000\000\000\000\000\000\
\000\000\142\000\000\000\000\000\173\255\000\000\000\000\083\255\
\000\000\000\000\142\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\174\255\000\000\000\000\000\000\000\000\
\171\255"

let yygindex = "\000\000\
\000\000\003\000\000\000\245\255\251\255\000\000\149\000\201\000\
\238\255\000\000\000\000\000\000\000\000\000\000\111\000\000\000\
\000\000"

let yytablesize = 1011
let yytable = "\042\000\
\008\000\018\000\063\000\066\000\064\000\014\000\067\000\068\000\
\069\000\070\000\065\000\049\000\051\000\080\000\054\000\055\000\
\057\000\058\000\112\000\081\000\061\000\062\000\043\000\001\000\
\081\000\071\000\072\000\073\000\074\000\075\000\076\000\003\000\
\077\000\078\000\119\000\063\000\083\000\064\000\014\000\011\000\
\120\000\085\000\086\000\065\000\014\000\011\000\020\000\057\000\
\043\000\132\000\133\000\094\000\096\000\097\000\089\000\098\000\
\099\000\100\000\101\000\102\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\055\000\047\000\116\000\048\000\118\000\
\021\000\055\000\051\000\115\000\013\000\117\000\067\000\068\000\
\069\000\070\000\013\000\111\000\056\000\008\000\009\000\010\000\
\011\000\012\000\056\000\008\000\009\000\010\000\011\000\012\000\
\013\000\071\000\072\000\073\000\074\000\075\000\076\000\130\000\
\122\000\022\000\023\000\135\000\128\000\129\000\024\000\023\000\
\138\000\046\000\140\000\024\000\026\000\025\000\131\000\079\000\
\139\000\026\000\026\000\026\000\027\000\145\000\028\000\028\000\
\028\000\028\000\069\000\070\000\127\000\029\000\030\000\031\000\
\027\000\027\000\032\000\059\000\033\000\067\000\068\000\069\000\
\070\000\033\000\060\000\110\000\034\000\035\000\036\000\037\000\
\038\000\034\000\035\000\036\000\037\000\038\000\023\000\087\000\
\071\000\072\000\024\000\124\000\025\000\029\000\029\000\029\000\
\026\000\069\000\123\000\027\000\067\000\068\000\069\000\070\000\
\028\000\020\000\020\000\020\000\029\000\030\000\031\000\141\000\
\137\000\032\000\021\000\021\000\021\000\068\000\022\000\023\000\
\033\000\049\000\082\000\049\000\114\000\049\000\049\000\049\000\
\034\000\035\000\036\000\037\000\038\000\023\000\049\000\019\000\
\000\000\024\000\023\000\025\000\049\000\000\000\024\000\026\000\
\000\000\000\000\027\000\000\000\026\000\000\000\000\000\028\000\
\000\000\000\000\142\000\029\000\030\000\031\000\000\000\000\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\000\000\000\000\000\000\000\000\033\000\000\000\000\000\034\000\
\035\000\036\000\037\000\038\000\056\000\035\000\036\000\037\000\
\038\000\008\000\000\000\000\000\000\000\008\000\000\000\008\000\
\000\000\000\000\000\000\008\000\000\000\000\000\008\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\008\000\
\008\000\008\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\057\000\000\000\000\000\000\000\057\000\000\000\057\000\000\000\
\000\000\000\000\057\000\000\000\000\000\057\000\000\000\000\000\
\000\000\000\000\057\000\000\000\000\000\000\000\057\000\057\000\
\057\000\000\000\000\000\057\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\000\057\000\057\000\057\000\057\000\023\000\
\000\000\000\000\000\000\024\000\000\000\025\000\000\000\000\000\
\000\000\026\000\000\000\000\000\027\000\000\000\000\000\000\000\
\000\000\028\000\000\000\000\000\000\000\029\000\030\000\031\000\
\000\000\143\000\032\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\034\000\035\000\036\000\037\000\038\000\057\000\000\000\
\000\000\000\000\057\000\000\000\057\000\000\000\000\000\000\000\
\057\000\000\000\000\000\057\000\000\000\000\000\000\000\000\000\
\057\000\000\000\000\000\000\000\057\000\057\000\057\000\000\000\
\057\000\057\000\000\000\000\000\000\000\000\000\000\000\000\000\
\057\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\057\000\057\000\057\000\057\000\057\000\023\000\000\000\000\000\
\000\000\024\000\000\000\025\000\023\000\000\000\000\000\026\000\
\024\000\050\000\027\000\000\000\000\000\000\000\026\000\028\000\
\000\000\000\000\000\000\029\000\030\000\031\000\023\000\093\000\
\032\000\000\000\024\000\000\000\000\000\000\000\000\000\033\000\
\026\000\000\000\000\000\000\000\000\000\000\000\033\000\034\000\
\035\000\036\000\037\000\038\000\000\000\000\000\034\000\035\000\
\036\000\037\000\038\000\000\000\000\000\000\000\000\000\000\000\
\033\000\050\000\000\000\050\000\000\000\050\000\050\000\050\000\
\034\000\035\000\036\000\037\000\038\000\035\000\050\000\035\000\
\000\000\035\000\035\000\035\000\050\000\035\000\035\000\035\000\
\035\000\000\000\035\000\000\000\000\000\000\000\000\000\000\000\
\035\000\000\000\000\000\050\000\050\000\000\000\000\000\000\000\
\035\000\035\000\035\000\035\000\035\000\035\000\000\000\035\000\
\035\000\037\000\000\000\037\000\000\000\037\000\037\000\037\000\
\000\000\037\000\037\000\000\000\000\000\000\000\037\000\000\000\
\000\000\000\000\000\000\000\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\037\000\037\000\037\000\
\037\000\037\000\000\000\037\000\037\000\038\000\000\000\038\000\
\000\000\038\000\038\000\038\000\000\000\038\000\038\000\000\000\
\000\000\000\000\038\000\000\000\000\000\000\000\000\000\000\000\
\038\000\041\000\000\000\041\000\000\000\041\000\041\000\041\000\
\038\000\038\000\038\000\038\000\038\000\038\000\041\000\038\000\
\038\000\000\000\000\000\000\000\041\000\042\000\000\000\042\000\
\000\000\042\000\042\000\042\000\041\000\041\000\041\000\041\000\
\041\000\041\000\042\000\041\000\041\000\000\000\000\000\000\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\000\042\000\042\000\042\000\042\000\042\000\084\000\042\000\
\042\000\000\000\000\000\000\000\000\000\000\000\067\000\068\000\
\069\000\070\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\000\000\043\000\000\000\043\000\043\000\
\043\000\071\000\072\000\073\000\074\000\075\000\076\000\043\000\
\077\000\078\000\000\000\000\000\000\000\043\000\044\000\000\000\
\044\000\000\000\044\000\044\000\044\000\000\000\000\000\043\000\
\043\000\043\000\043\000\044\000\043\000\043\000\000\000\000\000\
\000\000\044\000\045\000\000\000\045\000\000\000\045\000\045\000\
\045\000\000\000\000\000\044\000\044\000\044\000\044\000\045\000\
\044\000\044\000\000\000\000\000\000\000\045\000\046\000\000\000\
\046\000\000\000\046\000\046\000\046\000\000\000\000\000\045\000\
\045\000\045\000\045\000\046\000\045\000\045\000\000\000\000\000\
\000\000\046\000\047\000\000\000\047\000\000\000\047\000\047\000\
\047\000\000\000\000\000\046\000\046\000\046\000\046\000\047\000\
\046\000\046\000\000\000\000\000\048\000\047\000\048\000\000\000\
\048\000\048\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\136\000\000\000\047\000\047\000\000\000\048\000\
\067\000\068\000\069\000\070\000\000\000\000\000\091\000\000\000\
\000\000\067\000\068\000\069\000\070\000\000\000\000\000\048\000\
\000\000\000\000\000\000\071\000\072\000\073\000\074\000\075\000\
\076\000\000\000\077\000\078\000\071\000\072\000\073\000\074\000\
\075\000\076\000\092\000\077\000\078\000\067\000\068\000\069\000\
\070\000\000\000\000\000\113\000\000\000\000\000\067\000\068\000\
\069\000\070\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\000\072\000\073\000\074\000\075\000\076\000\000\000\077\000\
\078\000\071\000\072\000\073\000\074\000\075\000\076\000\000\000\
\077\000\078\000\121\000\000\000\067\000\068\000\069\000\070\000\
\000\000\000\000\000\000\000\000\000\000\067\000\068\000\069\000\
\070\000\000\000\088\000\000\000\000\000\000\000\000\000\071\000\
\072\000\073\000\074\000\075\000\076\000\000\000\077\000\078\000\
\071\000\072\000\073\000\074\000\075\000\076\000\000\000\077\000\
\078\000\067\000\068\000\069\000\070\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\090\000\000\000\000\000\067\000\
\068\000\069\000\070\000\000\000\071\000\072\000\073\000\074\000\
\075\000\076\000\126\000\077\000\078\000\000\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\000\000\077\000\078\000\067\000\068\000\069\000\070\000\000\000\
\144\000\071\000\072\000\073\000\074\000\075\000\076\000\000\000\
\077\000\035\000\035\000\035\000\035\000\000\000\071\000\072\000\
\073\000\074\000\075\000\076\000\035\000\077\000\078\000\067\000\
\068\000\069\000\070\000\000\000\035\000\035\000\035\000\035\000\
\035\000\035\000\000\000\035\000\035\000\000\000\000\000\000\000\
\000\000\000\000\071\000\072\000\073\000\074\000\075\000\076\000\
\000\000\077\000\078\000"

let yycheck = "\018\000\
\000\000\007\000\001\001\007\001\003\001\003\000\010\001\011\001\
\012\001\013\001\009\001\023\000\024\000\002\001\026\000\027\000\
\028\000\029\000\002\001\008\001\032\000\033\000\020\000\001\000\
\008\001\029\001\030\001\031\001\032\001\033\001\034\001\026\001\
\036\001\037\001\002\001\001\001\048\000\003\001\002\001\002\001\
\008\001\006\001\007\001\009\001\008\001\008\001\001\001\000\000\
\046\000\016\001\017\001\063\000\064\000\065\000\020\001\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\002\001\007\001\088\000\009\001\090\000\
\043\001\008\001\086\000\087\000\002\001\089\000\010\001\011\001\
\012\001\013\001\008\001\081\000\002\001\038\001\039\001\040\001\
\041\001\042\001\008\001\038\001\039\001\040\001\041\001\042\001\
\043\001\029\001\030\001\031\001\032\001\033\001\034\001\122\000\
\110\000\043\001\001\001\126\000\120\000\121\000\005\001\001\001\
\131\000\001\001\133\000\005\001\011\001\007\001\124\000\043\001\
\132\000\011\001\006\001\007\001\014\001\144\000\006\001\007\001\
\008\001\019\001\012\001\013\001\022\001\023\001\024\001\025\001\
\006\001\007\001\028\001\007\001\035\001\010\001\011\001\012\001\
\013\001\035\001\007\001\021\001\043\001\044\001\045\001\046\001\
\047\001\043\001\044\001\045\001\046\001\047\001\001\001\008\001\
\029\001\030\001\005\001\021\001\007\001\006\001\007\001\008\001\
\011\001\000\000\043\001\014\001\010\001\011\001\012\001\013\001\
\019\001\016\001\017\001\018\001\023\001\024\001\025\001\018\001\
\027\001\028\001\016\001\017\001\018\001\000\000\018\001\018\001\
\035\001\002\001\046\000\004\001\086\000\006\001\007\001\008\001\
\043\001\044\001\045\001\046\001\047\001\001\001\015\001\007\000\
\255\255\005\001\001\001\007\001\021\001\255\255\005\001\011\001\
\255\255\255\255\014\001\255\255\011\001\255\255\255\255\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\255\255\255\255\
\028\001\255\255\255\255\255\255\255\255\255\255\255\255\035\001\
\255\255\255\255\255\255\255\255\035\001\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\043\001\044\001\045\001\046\001\
\047\001\001\001\255\255\255\255\255\255\005\001\255\255\007\001\
\255\255\255\255\255\255\011\001\255\255\255\255\014\001\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\255\255\023\001\
\024\001\025\001\255\255\255\255\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\001\001\255\255\255\255\255\255\005\001\255\255\007\001\255\255\
\255\255\255\255\011\001\255\255\255\255\014\001\255\255\255\255\
\255\255\255\255\019\001\255\255\255\255\255\255\023\001\024\001\
\025\001\255\255\255\255\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\035\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\001\001\
\255\255\255\255\255\255\005\001\255\255\007\001\255\255\255\255\
\255\255\011\001\255\255\255\255\014\001\255\255\255\255\255\255\
\255\255\019\001\255\255\255\255\255\255\023\001\024\001\025\001\
\255\255\027\001\028\001\255\255\255\255\255\255\255\255\255\255\
\255\255\035\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\001\001\255\255\
\255\255\255\255\005\001\255\255\007\001\255\255\255\255\255\255\
\011\001\255\255\255\255\014\001\255\255\255\255\255\255\255\255\
\019\001\255\255\255\255\255\255\023\001\024\001\025\001\255\255\
\027\001\028\001\255\255\255\255\255\255\255\255\255\255\255\255\
\035\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\043\001\044\001\045\001\046\001\047\001\001\001\255\255\255\255\
\255\255\005\001\255\255\007\001\001\001\255\255\255\255\011\001\
\005\001\006\001\014\001\255\255\255\255\255\255\011\001\019\001\
\255\255\255\255\255\255\023\001\024\001\025\001\001\001\002\001\
\028\001\255\255\005\001\255\255\255\255\255\255\255\255\035\001\
\011\001\255\255\255\255\255\255\255\255\255\255\035\001\043\001\
\044\001\045\001\046\001\047\001\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\255\255\255\255\255\255\255\255\255\255\
\035\001\002\001\255\255\004\001\255\255\006\001\007\001\008\001\
\043\001\044\001\045\001\046\001\047\001\002\001\015\001\004\001\
\255\255\006\001\007\001\008\001\021\001\010\001\011\001\012\001\
\013\001\255\255\015\001\255\255\255\255\255\255\255\255\255\255\
\021\001\255\255\255\255\036\001\037\001\255\255\255\255\255\255\
\029\001\030\001\031\001\032\001\033\001\034\001\255\255\036\001\
\037\001\002\001\255\255\004\001\255\255\006\001\007\001\008\001\
\255\255\010\001\011\001\255\255\255\255\255\255\015\001\255\255\
\255\255\255\255\255\255\255\255\021\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\029\001\030\001\031\001\032\001\
\033\001\034\001\255\255\036\001\037\001\002\001\255\255\004\001\
\255\255\006\001\007\001\008\001\255\255\010\001\011\001\255\255\
\255\255\255\255\015\001\255\255\255\255\255\255\255\255\255\255\
\021\001\002\001\255\255\004\001\255\255\006\001\007\001\008\001\
\029\001\030\001\031\001\032\001\033\001\034\001\015\001\036\001\
\037\001\255\255\255\255\255\255\021\001\002\001\255\255\004\001\
\255\255\006\001\007\001\008\001\029\001\030\001\031\001\032\001\
\033\001\034\001\015\001\036\001\037\001\255\255\255\255\255\255\
\021\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\031\001\032\001\033\001\034\001\002\001\036\001\
\037\001\255\255\255\255\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\255\255\004\001\255\255\006\001\007\001\
\008\001\029\001\030\001\031\001\032\001\033\001\034\001\015\001\
\036\001\037\001\255\255\255\255\255\255\021\001\002\001\255\255\
\004\001\255\255\006\001\007\001\008\001\255\255\255\255\031\001\
\032\001\033\001\034\001\015\001\036\001\037\001\255\255\255\255\
\255\255\021\001\002\001\255\255\004\001\255\255\006\001\007\001\
\008\001\255\255\255\255\031\001\032\001\033\001\034\001\015\001\
\036\001\037\001\255\255\255\255\255\255\021\001\002\001\255\255\
\004\001\255\255\006\001\007\001\008\001\255\255\255\255\031\001\
\032\001\033\001\034\001\015\001\036\001\037\001\255\255\255\255\
\255\255\021\001\002\001\255\255\004\001\255\255\006\001\007\001\
\008\001\255\255\255\255\031\001\032\001\033\001\034\001\015\001\
\036\001\037\001\255\255\255\255\002\001\021\001\004\001\255\255\
\006\001\007\001\008\001\255\255\255\255\255\255\255\255\255\255\
\255\255\015\001\004\001\255\255\036\001\037\001\255\255\021\001\
\010\001\011\001\012\001\013\001\255\255\255\255\007\001\255\255\
\255\255\010\001\011\001\012\001\013\001\255\255\255\255\037\001\
\255\255\255\255\255\255\029\001\030\001\031\001\032\001\033\001\
\034\001\255\255\036\001\037\001\029\001\030\001\031\001\032\001\
\033\001\034\001\007\001\036\001\037\001\010\001\011\001\012\001\
\013\001\255\255\255\255\007\001\255\255\255\255\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\031\001\032\001\033\001\034\001\255\255\036\001\
\037\001\029\001\030\001\031\001\032\001\033\001\034\001\255\255\
\036\001\037\001\008\001\255\255\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\255\255\015\001\255\255\255\255\255\255\255\255\029\001\
\030\001\031\001\032\001\033\001\034\001\255\255\036\001\037\001\
\029\001\030\001\031\001\032\001\033\001\034\001\255\255\036\001\
\037\001\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\021\001\255\255\255\255\010\001\
\011\001\012\001\013\001\255\255\029\001\030\001\031\001\032\001\
\033\001\034\001\021\001\036\001\037\001\255\255\010\001\011\001\
\012\001\013\001\029\001\030\001\031\001\032\001\033\001\034\001\
\255\255\036\001\037\001\010\001\011\001\012\001\013\001\255\255\
\015\001\029\001\030\001\031\001\032\001\033\001\034\001\255\255\
\036\001\010\001\011\001\012\001\013\001\255\255\029\001\030\001\
\031\001\032\001\033\001\034\001\021\001\036\001\037\001\010\001\
\011\001\012\001\013\001\255\255\029\001\030\001\031\001\032\001\
\033\001\034\001\255\255\036\001\037\001\255\255\255\255\255\255\
\255\255\255\255\029\001\030\001\031\001\032\001\033\001\034\001\
\255\255\036\001\037\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LSBRACK\000\
  RSBRACK\000\
  LBRACE\000\
  RBRACE\000\
  SEMI\000\
  COMMA\000\
  ASSIGN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  IF\000\
  THEN\000\
  ELIF\000\
  ELSE\000\
  FI\000\
  FOR\000\
  IN\000\
  DO\000\
  ROF\000\
  RETURN\000\
  BREAK\000\
  CONTINUE\000\
  DEF\000\
  FED\000\
  DISP\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  NOT\000\
  AND\000\
  OR\000\
  INT\000\
  DOUBLE\000\
  STRING\000\
  BOOL\000\
  EOF\000\
  "

let yynames_block = "\
  MAT\000\
  ID\000\
  BOOL_LITERAL\000\
  INT_LITERAL\000\
  DOUBLE_LITERAL\000\
  STRING_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 34 "parser.mly"
                        ( 1 )
# 525 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
                        ( 2 )
# 531 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
                        ( 3 )
# 537 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
                        ( 4 )
# 543 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 38 "parser.mly"
                        ( 10+_1 )
# 550 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 42 "parser.mly"
                                 ( VarNoInit({ vname = _2; vtype = _1; }) )
# 558 "parser.ml"
               : 'var_dec_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'dtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 43 "parser.mly"
                                 ( VarInit({ vname = _2; vtype = _1; }, _4) )
# 567 "parser.ml"
               : 'var_dec_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "parser.mly"
                                  ( [] )
# 573 "parser.ml"
               : 'var_dec_def_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_dec_def_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_dec_def) in
    Obj.repr(
# 49 "parser.mly"
                                  ( _1 @ [_2] )
# 581 "parser.ml"
               : 'var_dec_def_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
                                  ( [{ vname = _2; vtype = _1; }] )
# 589 "parser.ml"
               : 'arg_def_list_1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dtype) in
    Obj.repr(
# 57 "parser.mly"
                                  ( [{ vname = "_"; vtype = _1; }] )
# 596 "parser.ml"
               : 'arg_def_list_1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'arg_def_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'dtype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 58 "parser.mly"
                                  ( _1 @ [{ vname = _4; vtype = _3; }] )
# 605 "parser.ml"
               : 'arg_def_list_1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arg_def_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dtype) in
    Obj.repr(
# 59 "parser.mly"
                                  ( _1 @ [{ vname = "_"; vtype = _3; }] )
# 613 "parser.ml"
               : 'arg_def_list_1))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                   ( [] )
# 619 "parser.ml"
               : 'arg_def_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arg_def_list_1) in
    Obj.repr(
# 63 "parser.mly"
                   ( _1 )
# 626 "parser.ml"
               : 'arg_def_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'dtype) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'arg_def_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'var_dec_def_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 67 "parser.mly"
                                                                              (
       { return = _2; fname = _3; args = _5; locals = _8; body = _9; }
      )
# 639 "parser.ml"
               : 'func_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'arg_def_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'var_dec_def_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 70 "parser.mly"
                                                                        (
        { return = 0; fname = _2; args = _4; locals = _7; body = _8; } 
      )
# 651 "parser.ml"
               : 'func_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_def) in
    Obj.repr(
# 77 "parser.mly"
                            ( [_1] )
# 658 "parser.ml"
               : 'func_def_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'func_def_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_def) in
    Obj.repr(
# 78 "parser.mly"
                            ( _1 @ [_2] )
# 666 "parser.ml"
               : 'func_def_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                                         ( [] )
# 672 "parser.ml"
               : 'elif_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'elif_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 86 "parser.mly"
                                         ( _1 @ [{cond=_3; stmts=_5}] )
# 681 "parser.ml"
               : 'elif_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                      ( [] )
# 687 "parser.ml"
               : 'else_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 92 "parser.mly"
                      ( _2 )
# 694 "parser.ml"
               : 'else_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
                                ( [[]] )
# 700 "parser.ml"
               : 'mat_literal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'mat_rows) in
    Obj.repr(
# 100 "parser.mly"
                                ( _2 )
# 707 "parser.ml"
               : 'mat_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mat_row) in
    Obj.repr(
# 104 "parser.mly"
                           ( [_1] )
# 714 "parser.ml"
               : 'mat_rows))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mat_rows) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mat_row) in
    Obj.repr(
# 105 "parser.mly"
                           ( _1 @ [_3] )
# 722 "parser.ml"
               : 'mat_rows))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                        ( [_1] )
# 729 "parser.ml"
               : 'mat_row))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mat_row) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                        ( _1 @ [_3]  )
# 737 "parser.ml"
               : 'mat_row))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 115 "parser.mly"
                                       ( Bool(_1) )
# 744 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 116 "parser.mly"
                                       ( Int(_1) )
# 751 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 117 "parser.mly"
                                       ( Double(_1) )
# 758 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 118 "parser.mly"
                                       ( String(_1) )
# 765 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mat_literal) in
    Obj.repr(
# 119 "parser.mly"
                                       ( Mat(_1) )
# 772 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 120 "parser.mly"
                                       ( Lvalue(Id(_1)) )
# 779 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                                       ( Lvalue(MatSub(_1, _3, _5)) )
# 788 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                                       ( Binop(_1, Plus,  _3) )
# 796 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                                       ( Binop(_1, Minus,  _3) )
# 804 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                                       ( Binop(_1, Times, _3) )
# 812 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                                       ( Binop(_1, Divide,  _3) )
# 820 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                                       ( Binop(_1, Eq,   _3) )
# 828 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                                       ( Binop(_1, Neq,  _3) )
# 836 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                                       ( Binop(_1, Lt,   _3) )
# 844 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                                       ( Binop(_1, Leq,  _3) )
# 852 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                                       ( Binop(_1, Gt,   _3) )
# 860 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                                       ( Binop(_1, Geq,  _3) )
# 868 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                                       ( Binop(_1, And,  _3) )
# 876 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                                       ( Binop(_1, Or,   _3) )
# 884 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                                       ( Assign(Id(_1), _3) )
# 892 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                                       ( Unaop(Not, _2) )
# 899 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                                       ( Unaop(Neg, _2) )
# 906 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 138 "parser.mly"
                                       ( Call(_1, []) )
# 913 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arg_call_list) in
    Obj.repr(
# 139 "parser.mly"
                                       ( Call(_1, _3) )
# 921 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                                       ( _2 )
# 928 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                 ( [_1] )
# 935 "parser.ml"
               : 'arg_call_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arg_call_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                              ( _1 @ [ _3 ] )
# 943 "parser.ml"
               : 'arg_call_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 151 "parser.mly"
                     ( [] )
# 949 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 152 "parser.mly"
                     ( _1 @ [_2] )
# 957 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "parser.mly"
                                                   ( Empty )
# 963 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                                                   ( Expr(_1) )
# 970 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                                                   ( Return(_2) )
# 977 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'stmt_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'elif_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'else_stmt) in
    Obj.repr(
# 159 "parser.mly"
                                                   ( If(
                                                       {cond = _2; stmts = _4}, 
                                                       _5, _6) )
# 989 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 162 "parser.mly"
                                                   ( CntFor(_2, _4, _6) )
# 998 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 163 "parser.mly"
                                                   ( CndFor(
                                                     {cond = _2; stmts = _4}) )
# 1007 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 165 "parser.mly"
                                                   ( Disp(_2) )
# 1014 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 166 "parser.mly"
                                                   ( Continue )
# 1020 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 167 "parser.mly"
                                                   ( Break )
# 1026 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'func_def_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'var_dec_def_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 172 "parser.mly"
                                              (
       {pfuns = _1; pvars = _2; pstms = _3;}
      )
# 1037 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_dec_def_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 175 "parser.mly"
                                (
        {pfuns = []; pvars = _1; pstms = _2;}
      )
# 1047 "parser.ml"
               : Ast.program))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
