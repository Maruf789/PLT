type token =
  | LPAREN
  | RPAREN
  | LSBRACK
  | RSBRACK
  | LBRACE
  | RBRACE
  | SEMI
  | COMMA
  | ASSIGN
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | IF
  | THEN
  | ELIF
  | ELSE
  | FI
  | FOR
  | IN
  | DO
  | ROF
  | RETURN
  | BREAK
  | CONTINUE
  | DEF
  | FED
  | DISP
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | NOT
  | AND
  | OR
  | INT
  | DOUBLE
  | STRING
  | BOOL
  | MAT
  | VOID
  | ID of (string)
  | BOOL_LITERAL of (bool)
  | INT_LITERAL of (int)
  | DOUBLE_LITERAL of (double)
  | STRING_LITERAL of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 57 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LSBRACK *);
  260 (* RSBRACK *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* SEMI *);
  264 (* COMMA *);
  265 (* ASSIGN *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* IF *);
  271 (* THEN *);
  272 (* ELIF *);
  273 (* ELSE *);
  274 (* FI *);
  275 (* FOR *);
  276 (* IN *);
  277 (* DO *);
  278 (* ROF *);
  279 (* RETURN *);
  280 (* BREAK *);
  281 (* CONTINUE *);
  282 (* DEF *);
  283 (* FED *);
  284 (* DISP *);
  285 (* EQ *);
  286 (* NEQ *);
  287 (* LT *);
  288 (* LEQ *);
  289 (* GT *);
  290 (* GEQ *);
  291 (* NOT *);
  292 (* AND *);
  293 (* OR *);
  294 (* INT *);
  295 (* DOUBLE *);
  296 (* STRING *);
  297 (* BOOL *);
  298 (* MAT *);
  299 (* VOID *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  300 (* ID *);
  301 (* BOOL_LITERAL *);
  302 (* INT_LITERAL *);
  303 (* DOUBLE_LITERAL *);
  304 (* STRING_LITERAL *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\004\000\004\000\
\006\000\006\000\007\000\007\000\007\000\007\000\008\000\008\000\
\009\000\009\000\010\000\010\000\011\000\011\000\013\000\013\000\
\014\000\014\000\015\000\015\000\016\000\016\000\017\000\017\000\
\018\000\018\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\012\000\012\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\001\000\001\000\001\000\001\000\
\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\002\000\002\000\002\000\003\000\005\000\
\001\000\002\000\002\000\001\000\004\000\003\000\006\000\005\000\
\000\000\002\000\002\000\004\000\010\000\009\000\001\000\002\000\
\000\000\005\000\000\000\002\000\002\000\003\000\001\000\003\000\
\001\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\006\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\004\000\003\000\000\000\002\000\002\000\003\000\007\000\007\000\
\005\000\003\000\002\000\002\000\004\000\003\000\002\000\001\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\081\000\
\000\000\017\000\000\000\000\000\031\000\000\000\000\000\000\000\
\000\000\000\000\004\000\000\000\000\000\012\000\013\000\014\000\
\000\000\018\000\000\000\000\000\000\000\026\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\044\000\045\000\046\000\000\000\047\000\
\068\000\000\000\032\000\005\000\006\000\007\000\000\000\000\000\
\015\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\000\000\000\000\064\000\000\000\000\000\000\000\000\000\076\000\
\075\000\000\000\000\000\000\000\000\000\000\000\069\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\066\000\038\000\000\000\000\000\
\067\000\000\000\067\000\070\000\074\000\000\000\000\000\000\000\
\000\000\000\000\052\000\053\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\
\016\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\000\000\000\000\000\000\000\000\024\000\
\000\000\000\000\000\000\067\000\073\000\000\000\000\000\028\000\
\000\000\021\000\023\000\000\000\067\000\000\000\000\000\049\000\
\000\000\000\000\000\000\000\000\071\000\072\000\030\000\000\000\
\067\000\029\000\000\000"

let yydgoto = "\002\000\
\008\000\021\000\009\000\010\000\047\000\011\000\098\000\030\000\
\012\000\094\000\013\000\014\000\015\000\147\000\158\000\048\000\
\065\000\066\000\049\000"

let yysindex = "\014\000\
\046\000\000\000\225\255\247\254\003\255\007\255\000\000\000\000\
\012\255\000\000\249\255\168\255\000\000\107\000\046\000\055\255\
\066\255\067\255\000\000\110\255\040\255\000\000\000\000\000\000\
\013\255\000\000\107\000\119\255\074\255\000\000\046\000\068\255\
\042\255\068\255\068\255\122\000\068\255\115\255\124\255\068\255\
\068\255\092\255\000\000\000\000\000\000\000\000\218\255\000\000\
\000\000\249\255\000\000\000\000\000\000\000\000\249\255\134\255\
\000\000\068\255\249\255\163\255\249\255\058\001\000\000\251\254\
\065\255\151\255\000\000\233\001\125\255\005\002\166\001\000\000\
\000\000\180\001\075\002\249\255\068\255\068\255\000\000\068\255\
\068\255\068\255\068\255\068\255\068\255\068\255\068\255\068\255\
\068\255\068\255\068\255\107\000\121\255\036\255\249\255\194\001\
\147\255\090\255\249\255\107\000\000\000\000\000\068\255\068\255\
\000\000\068\255\000\000\000\000\000\000\097\255\224\001\251\254\
\063\255\063\255\000\000\000\000\126\000\126\000\159\255\159\255\
\159\255\159\255\075\002\034\002\000\000\182\255\249\255\098\255\
\000\000\000\000\186\255\249\255\102\255\151\255\251\254\107\000\
\019\002\138\255\000\000\068\255\249\255\153\255\192\255\000\000\
\173\255\220\255\131\255\000\000\000\000\152\001\249\255\000\000\
\249\255\000\000\000\000\068\255\000\000\223\255\176\255\000\000\
\191\255\249\255\047\002\107\000\000\000\000\000\000\000\054\000\
\000\000\000\000\107\000"

let yyrindex = "\000\000\
\001\000\000\000\000\000\034\255\038\255\083\255\000\000\000\000\
\000\000\000\000\016\000\000\000\000\000\243\000\000\000\212\255\
\213\255\216\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\169\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\016\000\000\000\000\000\172\255\
\000\000\149\255\000\000\000\000\061\002\000\000\000\000\000\000\
\000\000\000\000\238\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\014\001\000\000\000\000\000\000\000\000\
\128\255\000\000\000\000\016\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\141\000\
\205\000\241\000\000\000\000\000\005\001\025\001\078\001\098\001\
\118\001\138\001\157\000\117\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\161\255\226\255\158\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\142\255\000\000\243\255\000\000\000\000\000\000\069\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\069\000\000\000\004\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000"

let yygindex = "\000\000\
\000\000\026\001\231\255\247\255\233\255\244\255\180\000\000\000\
\000\000\184\255\006\000\245\255\030\001\000\000\000\000\000\000\
\000\000\181\000\000\000"

let yytablesize = 877
let yytable = "\027\000\
\067\000\026\000\050\000\110\000\080\000\081\000\082\000\083\000\
\062\000\064\000\067\000\068\000\070\000\071\000\001\000\067\000\
\074\000\075\000\061\000\057\000\051\000\058\000\128\000\084\000\
\085\000\086\000\087\000\088\000\089\000\093\000\090\000\091\000\
\022\000\097\000\096\000\008\000\051\000\126\000\092\000\009\000\
\026\000\008\000\032\000\127\000\023\000\009\000\033\000\063\000\
\024\000\100\000\093\000\026\000\034\000\111\000\112\000\025\000\
\113\000\114\000\115\000\116\000\117\000\118\000\119\000\120\000\
\121\000\122\000\123\000\124\000\032\000\093\000\102\000\103\000\
\033\000\097\000\082\000\083\000\041\000\008\000\034\000\064\000\
\135\000\009\000\137\000\056\000\010\000\042\000\043\000\044\000\
\045\000\046\000\010\000\131\000\076\000\136\000\077\000\138\000\
\052\000\132\000\139\000\143\000\078\000\142\000\041\000\146\000\
\127\000\127\000\145\000\053\000\054\000\132\000\055\000\042\000\
\043\000\044\000\045\000\046\000\150\000\060\000\061\000\059\000\
\061\000\072\000\061\000\061\000\061\000\076\000\010\000\077\000\
\151\000\020\000\073\000\061\000\163\000\078\000\095\000\020\000\
\159\000\061\000\032\000\161\000\162\000\026\000\033\000\022\000\
\106\000\164\000\156\000\157\000\034\000\022\000\168\000\035\000\
\026\000\061\000\039\000\039\000\036\000\171\000\104\000\149\000\
\037\000\038\000\039\000\099\000\125\000\040\000\040\000\040\000\
\080\000\081\000\082\000\083\000\041\000\033\000\033\000\033\000\
\032\000\041\000\041\000\041\000\033\000\042\000\043\000\044\000\
\045\000\046\000\034\000\084\000\085\000\035\000\130\000\032\000\
\144\000\003\000\036\000\033\000\152\000\166\000\037\000\038\000\
\039\000\034\000\141\000\040\000\035\000\016\000\017\000\018\000\
\019\000\036\000\041\000\028\000\153\000\037\000\038\000\039\000\
\154\000\167\000\040\000\042\000\043\000\044\000\045\000\046\000\
\079\000\041\000\155\000\080\000\081\000\082\000\083\000\042\000\
\042\000\042\000\042\000\043\000\044\000\045\000\046\000\063\000\
\165\000\063\000\080\000\063\000\063\000\063\000\084\000\085\000\
\086\000\087\000\088\000\089\000\063\000\090\000\091\000\001\000\
\002\000\067\000\063\000\003\000\035\000\067\000\016\000\017\000\
\018\000\019\000\079\000\067\000\020\000\078\000\067\000\077\000\
\067\000\063\000\063\000\067\000\067\000\036\000\133\000\067\000\
\067\000\067\000\067\000\134\000\067\000\067\000\004\000\005\000\
\006\000\007\000\067\000\067\000\000\000\029\000\067\000\067\000\
\067\000\031\000\000\000\067\000\025\000\067\000\067\000\067\000\
\067\000\000\000\067\000\034\000\034\000\034\000\032\000\000\000\
\000\000\000\000\033\000\067\000\067\000\067\000\067\000\067\000\
\034\000\000\000\000\000\035\000\000\000\067\000\000\000\003\000\
\036\000\067\000\000\000\000\000\037\000\038\000\039\000\067\000\
\170\000\040\000\067\000\004\000\005\000\006\000\007\000\067\000\
\041\000\000\000\000\000\067\000\067\000\067\000\000\000\067\000\
\067\000\042\000\043\000\044\000\045\000\046\000\000\000\067\000\
\000\000\000\000\000\000\032\000\000\000\000\000\000\000\033\000\
\067\000\067\000\067\000\067\000\067\000\034\000\000\000\000\000\
\035\000\000\000\032\000\000\000\000\000\036\000\033\000\000\000\
\000\000\037\000\038\000\039\000\034\000\000\000\040\000\080\000\
\081\000\082\000\083\000\000\000\000\000\041\000\062\000\000\000\
\062\000\000\000\062\000\062\000\062\000\000\000\042\000\043\000\
\044\000\045\000\046\000\062\000\041\000\000\000\060\000\000\000\
\060\000\062\000\060\000\060\000\060\000\069\000\043\000\044\000\
\045\000\046\000\048\000\060\000\048\000\000\000\048\000\048\000\
\048\000\060\000\048\000\048\000\048\000\048\000\000\000\048\000\
\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\
\060\000\060\000\000\000\000\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\000\000\048\000\048\000\050\000\000\000\
\050\000\000\000\050\000\050\000\050\000\000\000\050\000\050\000\
\000\000\000\000\000\000\050\000\000\000\000\000\000\000\000\000\
\000\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\050\000\050\000\050\000\050\000\050\000\050\000\000\000\
\050\000\050\000\051\000\000\000\051\000\000\000\051\000\051\000\
\051\000\000\000\051\000\051\000\000\000\000\000\000\000\051\000\
\000\000\000\000\000\000\000\000\000\000\051\000\054\000\000\000\
\054\000\000\000\054\000\054\000\054\000\051\000\051\000\051\000\
\051\000\051\000\051\000\054\000\051\000\051\000\000\000\000\000\
\000\000\054\000\055\000\000\000\055\000\000\000\055\000\055\000\
\055\000\054\000\054\000\054\000\054\000\054\000\054\000\055\000\
\054\000\054\000\000\000\000\000\000\000\055\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\055\000\055\000\
\055\000\055\000\055\000\101\000\055\000\055\000\000\000\000\000\
\000\000\000\000\000\000\080\000\081\000\082\000\083\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\056\000\
\000\000\056\000\000\000\056\000\056\000\056\000\084\000\085\000\
\086\000\087\000\088\000\089\000\056\000\090\000\091\000\000\000\
\000\000\000\000\056\000\057\000\000\000\057\000\000\000\057\000\
\057\000\057\000\000\000\000\000\056\000\056\000\056\000\056\000\
\057\000\056\000\056\000\000\000\000\000\000\000\057\000\058\000\
\000\000\058\000\000\000\058\000\058\000\058\000\000\000\000\000\
\057\000\057\000\057\000\057\000\058\000\057\000\057\000\000\000\
\000\000\000\000\058\000\059\000\000\000\059\000\000\000\059\000\
\059\000\059\000\000\000\000\000\058\000\058\000\058\000\058\000\
\059\000\058\000\058\000\160\000\000\000\000\000\059\000\000\000\
\000\000\080\000\081\000\082\000\083\000\000\000\000\000\000\000\
\059\000\059\000\059\000\059\000\108\000\059\000\059\000\080\000\
\081\000\082\000\083\000\000\000\084\000\085\000\086\000\087\000\
\088\000\089\000\109\000\090\000\091\000\080\000\081\000\082\000\
\083\000\000\000\084\000\085\000\086\000\087\000\088\000\089\000\
\129\000\090\000\091\000\080\000\081\000\082\000\083\000\000\000\
\084\000\085\000\086\000\087\000\088\000\089\000\000\000\090\000\
\091\000\000\000\000\000\000\000\000\000\000\000\084\000\085\000\
\086\000\087\000\088\000\089\000\000\000\090\000\091\000\140\000\
\000\000\080\000\081\000\082\000\083\000\000\000\000\000\000\000\
\000\000\000\000\080\000\081\000\082\000\083\000\000\000\105\000\
\000\000\000\000\000\000\000\000\084\000\085\000\086\000\087\000\
\088\000\089\000\000\000\090\000\091\000\084\000\085\000\086\000\
\087\000\088\000\089\000\000\000\090\000\091\000\080\000\081\000\
\082\000\083\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\107\000\000\000\000\000\080\000\081\000\082\000\083\000\
\000\000\084\000\085\000\086\000\087\000\088\000\089\000\148\000\
\090\000\091\000\000\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\000\000\090\000\091\000\
\080\000\081\000\082\000\083\000\000\000\169\000\084\000\085\000\
\086\000\087\000\088\000\089\000\000\000\090\000\048\000\048\000\
\048\000\048\000\000\000\084\000\085\000\086\000\087\000\088\000\
\089\000\048\000\090\000\091\000\080\000\081\000\082\000\083\000\
\000\000\048\000\048\000\048\000\048\000\048\000\048\000\000\000\
\048\000\048\000\000\000\000\000\000\000\000\000\000\000\084\000\
\085\000\086\000\087\000\088\000\089\000"

let yycheck = "\011\000\
\000\000\011\000\015\000\076\000\010\001\011\001\012\001\013\001\
\032\000\033\000\034\000\035\000\036\000\037\000\001\000\000\000\
\040\000\041\000\031\000\007\001\015\000\009\001\095\000\029\001\
\030\001\031\001\032\001\033\001\034\001\055\000\036\001\037\001\
\042\001\059\000\058\000\002\001\031\000\002\001\050\000\002\001\
\050\000\008\001\001\001\008\001\042\001\008\001\005\001\006\001\
\042\001\061\000\076\000\061\000\011\001\077\000\078\000\044\001\
\080\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\001\001\095\000\006\001\007\001\
\005\001\099\000\012\001\013\001\035\001\044\001\011\001\103\000\
\104\000\044\001\106\000\044\001\002\001\044\001\045\001\046\001\
\047\001\048\001\008\001\002\001\001\001\105\000\003\001\107\000\
\042\001\008\001\002\001\002\001\009\001\127\000\035\001\002\001\
\008\001\008\001\132\000\042\001\042\001\008\001\001\001\044\001\
\045\001\046\001\047\001\048\001\140\000\044\001\002\001\001\001\
\004\001\007\001\006\001\007\001\008\001\001\001\044\001\003\001\
\141\000\002\001\007\001\015\001\156\000\009\001\001\001\008\001\
\148\000\021\001\001\001\151\000\153\000\151\000\005\001\002\001\
\020\001\157\000\016\001\017\001\011\001\008\001\162\000\014\001\
\162\000\037\001\006\001\007\001\019\001\169\000\008\001\022\001\
\023\001\024\001\025\001\001\001\044\001\028\001\006\001\007\001\
\010\001\011\001\012\001\013\001\035\001\016\001\017\001\018\001\
\001\001\006\001\007\001\008\001\005\001\044\001\045\001\046\001\
\047\001\048\001\011\001\029\001\030\001\014\001\044\001\001\001\
\007\001\026\001\019\001\005\001\044\001\022\001\023\001\024\001\
\025\001\011\001\021\001\028\001\014\001\038\001\039\001\040\001\
\041\001\019\001\035\001\044\001\021\001\023\001\024\001\025\001\
\044\001\027\001\028\001\044\001\045\001\046\001\047\001\048\001\
\007\001\035\001\007\001\010\001\011\001\012\001\013\001\006\001\
\007\001\008\001\044\001\045\001\046\001\047\001\048\001\002\001\
\018\001\004\001\000\000\006\001\007\001\008\001\029\001\030\001\
\031\001\032\001\033\001\034\001\015\001\036\001\037\001\044\001\
\044\001\001\001\021\001\044\001\018\001\005\001\038\001\039\001\
\040\001\041\001\000\000\011\001\044\001\000\000\014\001\000\000\
\001\001\036\001\037\001\019\001\005\001\018\001\099\000\023\001\
\024\001\025\001\011\001\103\000\028\001\014\001\038\001\039\001\
\040\001\041\001\019\001\035\001\255\255\012\000\023\001\024\001\
\025\001\012\000\255\255\028\001\044\001\045\001\046\001\047\001\
\048\001\255\255\035\001\016\001\017\001\018\001\001\001\255\255\
\255\255\255\255\005\001\044\001\045\001\046\001\047\001\048\001\
\011\001\255\255\255\255\014\001\255\255\001\001\255\255\026\001\
\019\001\005\001\255\255\255\255\023\001\024\001\025\001\011\001\
\027\001\028\001\014\001\038\001\039\001\040\001\041\001\019\001\
\035\001\255\255\255\255\023\001\024\001\025\001\255\255\027\001\
\028\001\044\001\045\001\046\001\047\001\048\001\255\255\035\001\
\255\255\255\255\255\255\001\001\255\255\255\255\255\255\005\001\
\044\001\045\001\046\001\047\001\048\001\011\001\255\255\255\255\
\014\001\255\255\001\001\255\255\255\255\019\001\005\001\255\255\
\255\255\023\001\024\001\025\001\011\001\255\255\028\001\010\001\
\011\001\012\001\013\001\255\255\255\255\035\001\002\001\255\255\
\004\001\255\255\006\001\007\001\008\001\255\255\044\001\045\001\
\046\001\047\001\048\001\015\001\035\001\255\255\002\001\255\255\
\004\001\021\001\006\001\007\001\008\001\044\001\045\001\046\001\
\047\001\048\001\002\001\015\001\004\001\255\255\006\001\007\001\
\008\001\021\001\010\001\011\001\012\001\013\001\255\255\015\001\
\255\255\255\255\255\255\255\255\255\255\021\001\255\255\255\255\
\036\001\037\001\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\036\001\037\001\002\001\255\255\
\004\001\255\255\006\001\007\001\008\001\255\255\010\001\011\001\
\255\255\255\255\255\255\015\001\255\255\255\255\255\255\255\255\
\255\255\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\255\255\
\036\001\037\001\002\001\255\255\004\001\255\255\006\001\007\001\
\008\001\255\255\010\001\011\001\255\255\255\255\255\255\015\001\
\255\255\255\255\255\255\255\255\255\255\021\001\002\001\255\255\
\004\001\255\255\006\001\007\001\008\001\029\001\030\001\031\001\
\032\001\033\001\034\001\015\001\036\001\037\001\255\255\255\255\
\255\255\021\001\002\001\255\255\004\001\255\255\006\001\007\001\
\008\001\029\001\030\001\031\001\032\001\033\001\034\001\015\001\
\036\001\037\001\255\255\255\255\255\255\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\002\001\036\001\037\001\255\255\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\004\001\255\255\006\001\007\001\008\001\029\001\030\001\
\031\001\032\001\033\001\034\001\015\001\036\001\037\001\255\255\
\255\255\255\255\021\001\002\001\255\255\004\001\255\255\006\001\
\007\001\008\001\255\255\255\255\031\001\032\001\033\001\034\001\
\015\001\036\001\037\001\255\255\255\255\255\255\021\001\002\001\
\255\255\004\001\255\255\006\001\007\001\008\001\255\255\255\255\
\031\001\032\001\033\001\034\001\015\001\036\001\037\001\255\255\
\255\255\255\255\021\001\002\001\255\255\004\001\255\255\006\001\
\007\001\008\001\255\255\255\255\031\001\032\001\033\001\034\001\
\015\001\036\001\037\001\004\001\255\255\255\255\021\001\255\255\
\255\255\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\031\001\032\001\033\001\034\001\007\001\036\001\037\001\010\001\
\011\001\012\001\013\001\255\255\029\001\030\001\031\001\032\001\
\033\001\034\001\007\001\036\001\037\001\010\001\011\001\012\001\
\013\001\255\255\029\001\030\001\031\001\032\001\033\001\034\001\
\007\001\036\001\037\001\010\001\011\001\012\001\013\001\255\255\
\029\001\030\001\031\001\032\001\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\255\255\255\255\029\001\030\001\
\031\001\032\001\033\001\034\001\255\255\036\001\037\001\008\001\
\255\255\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\255\255\015\001\
\255\255\255\255\255\255\255\255\029\001\030\001\031\001\032\001\
\033\001\034\001\255\255\036\001\037\001\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\036\001\037\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\255\255\255\255\010\001\011\001\012\001\013\001\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\021\001\
\036\001\037\001\255\255\010\001\011\001\012\001\013\001\029\001\
\030\001\031\001\032\001\033\001\034\001\255\255\036\001\037\001\
\010\001\011\001\012\001\013\001\255\255\015\001\029\001\030\001\
\031\001\032\001\033\001\034\001\255\255\036\001\010\001\011\001\
\012\001\013\001\255\255\029\001\030\001\031\001\032\001\033\001\
\034\001\021\001\036\001\037\001\010\001\011\001\012\001\013\001\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\255\255\
\036\001\037\001\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\031\001\032\001\033\001\034\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LSBRACK\000\
  RSBRACK\000\
  LBRACE\000\
  RBRACE\000\
  SEMI\000\
  COMMA\000\
  ASSIGN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  IF\000\
  THEN\000\
  ELIF\000\
  ELSE\000\
  FI\000\
  FOR\000\
  IN\000\
  DO\000\
  ROF\000\
  RETURN\000\
  BREAK\000\
  CONTINUE\000\
  DEF\000\
  FED\000\
  DISP\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  NOT\000\
  AND\000\
  OR\000\
  INT\000\
  DOUBLE\000\
  STRING\000\
  BOOL\000\
  MAT\000\
  VOID\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  BOOL_LITERAL\000\
  INT_LITERAL\000\
  DOUBLE_LITERAL\000\
  STRING_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
                        ( 1 )
# 507 "parser.ml"
               : 'rtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
                        ( 2 )
# 513 "parser.ml"
               : 'rtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
                        ( 3 )
# 519 "parser.ml"
               : 'rtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 38 "parser.mly"
                        ( 4 )
# 525 "parser.ml"
               : 'rtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "parser.mly"
                        ( 5 )
# 531 "parser.ml"
               : 'rtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parser.mly"
                        ( 6 )
# 537 "parser.ml"
               : 'rtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parser.mly"
                        ( 7 )
# 543 "parser.ml"
               : 'rtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
                        ( 1 )
# 549 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
                        ( 2 )
# 555 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
                        ( 3 )
# 561 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "parser.mly"
                        ( 4 )
# 567 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
                        ( 5 )
# 573 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
                        ( 6 )
# 579 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
                        ( 7 )
# 585 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 55 "parser.mly"
                                      ( VarNoInit({ vname = _2; vtype = _1; }) )
# 593 "parser.ml"
               : 'var_dec_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'dtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                                      ( VarInit({ vname = _2; vtype = _1; }, _4) )
# 602 "parser.ml"
               : 'var_dec_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_dec_def) in
    Obj.repr(
# 61 "parser.mly"
                                  ( [_1] )
# 609 "parser.ml"
               : 'var_dec_def_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_dec_def_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_dec_def) in
    Obj.repr(
# 62 "parser.mly"
                                  ( List.concat [_1; [_2];] )
# 617 "parser.ml"
               : 'var_dec_def_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 69 "parser.mly"
                                      ( [{ vname = "_"; vtype = _1; }] )
# 625 "parser.ml"
               : 'args_declare_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dtype) in
    Obj.repr(
# 70 "parser.mly"
                                      ( [{ vname = "_"; vtype = _1; }] )
# 632 "parser.ml"
               : 'args_declare_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'args_declare_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'dtype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
                                      ( List.concat [_1; [{ vname = "_"; vtype = _3; }];] )
# 641 "parser.ml"
               : 'args_declare_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_declare_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dtype) in
    Obj.repr(
# 72 "parser.mly"
                                      ( List.concat [_1; [{ vname = "_"; vtype = _3; }];] )
# 649 "parser.ml"
               : 'args_declare_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'rtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'args_declare_list) in
    Obj.repr(
# 77 "parser.mly"
                                                  (
        { return = _1; fname = _2; args = _4; locals = []; body = []; } 
      )
# 660 "parser.ml"
               : 'func_declare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'args_declare_list) in
    Obj.repr(
# 80 "parser.mly"
                                            (
        { return = 0; fname = _1; args = _3; locals = []; body = []; } 
      )
# 670 "parser.ml"
               : 'func_declare))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                                   ( [] )
# 676 "parser.ml"
               : 'func_declare_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'func_declare_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_declare) in
    Obj.repr(
# 87 "parser.mly"
                                   ( List.concat [_1; [_2];] )
# 684 "parser.ml"
               : 'func_declare_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parser.mly"
                                       ( { vname = _2; vtype = _1 } )
# 692 "parser.ml"
               : 'def_call_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'def_call_arg_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'dtype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 93 "parser.mly"
                                       ( List.concat [_1; [ { vname = _4; vtype = _3 } ];] )
# 701 "parser.ml"
               : 'def_call_arg_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'rtype) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'def_call_arg_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'var_dec_def_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 97 "parser.mly"
                                                                                   (
        { return = _2; fname = _3; args = _5; locals = _8; body = _9; }
      )
# 714 "parser.ml"
               : 'func_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'def_call_arg_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'var_dec_def_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 100 "parser.mly"
                                                                             (
        { return = 0; fname = _2; args = _4; locals = _7; body = _8; } 
      )
# 726 "parser.ml"
               : 'func_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_def) in
    Obj.repr(
# 107 "parser.mly"
                            ( [_1] )
# 733 "parser.ml"
               : 'func_def_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'func_def_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_def) in
    Obj.repr(
# 108 "parser.mly"
                            ( List.concat [_1; [_2];] )
# 741 "parser.ml"
               : 'func_def_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parser.mly"
                                       ( [] )
# 747 "parser.ml"
               : 'elif_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'elif_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 116 "parser.mly"
                                       ( List.concat [_1; [(_3, _5)];] )
# 756 "parser.ml"
               : 'elif_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
                      ( () )
# 762 "parser.ml"
               : 'else_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 122 "parser.mly"
                      ( _2 )
# 769 "parser.ml"
               : 'else_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
                                ( [] )
# 775 "parser.ml"
               : 'mat_literal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'mat_rows) in
    Obj.repr(
# 130 "parser.mly"
                                ( [_2] )
# 782 "parser.ml"
               : 'mat_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mat_row) in
    Obj.repr(
# 135 "parser.mly"
                           ( _1 )
# 789 "parser.ml"
               : 'mat_rows))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mat_rows) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mat_row) in
    Obj.repr(
# 136 "parser.mly"
                           ( List.concat [_1; [_3];] )
# 797 "parser.ml"
               : 'mat_rows))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                        ( _1 )
# 804 "parser.ml"
               : 'mat_row))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mat_row) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                        ( List.concat [_1; [_3];] )
# 812 "parser.ml"
               : 'mat_row))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 147 "parser.mly"
                                       ( Bool(_1) )
# 819 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 148 "parser.mly"
                                       ( Int(_1) )
# 826 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : double) in
    Obj.repr(
# 149 "parser.mly"
                                       ( Double(_1) )
# 833 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 150 "parser.mly"
                                       ( String(_1) )
# 840 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mat_literal) in
    Obj.repr(
# 151 "parser.mly"
                                       ( Mat(_1) )
# 847 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 152 "parser.mly"
                                       ( Id(_1) )
# 854 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
                                       ( MatSub(_1, _3, _5) )
# 863 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "parser.mly"
                                       ( Binop(_1, Plus,  _3) )
# 871 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
                                       ( Binop(_1, Minus,  _3) )
# 879 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                                       ( Binop(_1, Times, _3) )
# 887 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                                       ( Binop(_1, Divide,  _3) )
# 895 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "parser.mly"
                                       ( Binop(_1, Eq,   _3) )
# 903 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
                                       ( Binop(_1, Neq,  _3) )
# 911 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "parser.mly"
                                       ( Binop(_1, Lt,   _3) )
# 919 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
                                       ( Binop(_1, Leq,  _3) )
# 927 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "parser.mly"
                                       ( Binop(_1, Gt,   _3) )
# 935 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
                                       ( Binop(_1, Geq,  _3) )
# 943 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 165 "parser.mly"
                                       ( Binop(_1, And,  _3) )
# 951 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                                       ( Binop(_1, Or,   _3) )
# 959 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
                                       ( Assign(_1, _3) )
# 967 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                                       ( Unaop(Not, _2) )
# 974 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
                                       ( Unaop(Neg, _2) )
# 981 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'def_call_arg_list) in
    Obj.repr(
# 170 "parser.mly"
                                       ( Call(_1, _3) )
# 989 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
                                       ( _2 )
# 996 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "parser.mly"
                   ( [] )
# 1002 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 178 "parser.mly"
                   ( List.concat [_1; [_2];] )
# 1010 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                                                   ( Expr(_1) )
# 1017 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
                                                   ( Return(_2) )
# 1024 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'stmt_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'elif_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'else_stmt) in
    Obj.repr(
# 184 "parser.mly"
                                                   ( If({_2, _4}, _5, _6) )
# 1034 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 185 "parser.mly"
                                                   ( CntFor(_2, _4, _6) )
# 1043 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 186 "parser.mly"
                                                   ( CndFor({_2, _4}) )
# 1051 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
                                                   ( Disp(_2) )
# 1058 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 188 "parser.mly"
                                                   ( Continue )
# 1064 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 189 "parser.mly"
                                                   ( Break )
# 1070 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'func_declare_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'func_def_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var_dec_def_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 192 "parser.mly"
                                                                (
        {functions = (_1@_2); variables = _3; statements = _4;}
      )
# 1082 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'func_def_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'var_dec_def_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 195 "parser.mly"
                                              (
        {functions = _1; variables = _2; statements = _3;}
      )
# 1093 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_dec_def_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 198 "parser.mly"
                                (
        {functions = []; variables = _1; statements = _2;}
      )
# 1103 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 201 "parser.mly"
               (
        {functions = []; variables = []; statements = _1;}
      )
# 1112 "parser.ml"
               : Ast.program))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
