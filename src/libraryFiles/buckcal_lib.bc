
# function: find the absolute value of a given double
def double abs(double x) do
	if x < 0 then
		return (-1 * x);
	fi
	return x;	
fed

#function: Return a column vector {x; x+1; â€¦ ; y}. If  y < x, return {}

def int mat range(int x, int y) do
	int mat v;
	int i : x;
	int mat tmp;
	for (y >= i) do
		tmp: {i};
		colname(tmp, {'col' + string_of_int(i)});
		v : colcat(v, tmp);
		i: i + 1;
	rof
	return v;
fed

#function: Return the number of rows in matrix mx;
def int mat range_col(int x, int y) do
	int mat v;
	int i : x;
	int mat tmp;
	for (y >= i) do
		tmp: {i};
		rowname(tmp, {'row' + string_of_int(i)});
		v : rowcat(v, tmp);
		i: i + 1;
	rof
	return v;
fed

#function: sum the rows of a matrix
def double mat sum_row(double mat mx) do
	int x;
	int y;
	double mat s: range(1, cols(mx)) * 0.;
	for x in range(1, (rows(mx))) do
		for y in range(1, (cols(mx))) do
			s[1, y]: s[1, y] + mx[x, y];
		rof
	rof
	return s;
fed

#function: sum the columns of a matrix
def double mat sum_col(double mat mx) do
	int x;
	int y;
	double mat s: range(1, rows(mx)) * 0.;
	for x in range(1, (cols(mx))) do
		for y in range(1, (rows(mx))) do
			s[1, y]: s[1, y] + mx[y, x];
		rof
	rof
	return s;
fed

#function: average of the all rows of a matrix

def double mat avg_col(double mat mx) do
	int r;
	int c;
	double sum : 0;
	double avg : 0;
	double mat v;
	for c in range(1, cols(mx)) do
		sum: 0;
		for r in range(1, rows(mx)) do
			sum : sum + mx[r,c];
		rof
		avg : sum/rows(mx);
		v : colcat(v,{avg});
	rof
	return v;
fed

#function: average of the all rows of a matrix

def double mat avg_row(double mat mx) do
	int r;
	int c;
	double sum : 0;
	double avg : 0;
	double mat v;
	for r in range(1, rows(mx)) do
		sum: 0;
		for c in range(1, cols(mx)) do
			sum : sum + mx[r,c];
		rof
		avg : sum/cols(mx);
		v : rowcat(v,{avg});
	rof
	return v;
fed

